第5章 使用流

    5.1 筛选和切片
        5.1.1 用谓词筛选
        5.1.2 筛选各异的元素
            List<Integer> numbers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);
            numbers.stream()
                .filter(i -> i % 2 == 0)
                .distinct()
                .forEach(System.out::println);
        5.1.3 截短流
            List<Dish> dishes = menu.stream()
                .filter(d -> d.getCalories() > 300)
                .limit(3)
                .collect(toList());
        5.1.4 跳过元素
            流还支持 skip(n) 方法，返回一个扔掉了前 n 个元素的流
            List<Dish> dishes = menu.stream()
                .filter(d -> d.getCalories() > 300)
                .skip(2)
                .collect(toList());

    5.2 映射
        5.2.1 对流中每一个元素应用函数
            List<Integer> dishNameLengths = menu.stream()
                            .map(Dish::getName)
                            .map(String::length)
                            .collect(Collectors.toList());
        5.2.2 流的扁平化
             flatmap 方法让你把一个流中的每个值都换成另一个流，然后把所有的流连接起来成为一个流.

    5.3 查找和匹配
        anyMatch 、 allMatch 和 noneMatch 这三个操作都用到了我们所谓的短路，这就是大家熟悉
        的Java中 && 和 || 运算符短路在流中的版本。

        5.3.3 查找元素
            findAny 方法将返回当前流中的任意元素
        5.3.4 查找第一个元素
            List<Integer> someNumbers = Arrays.asList(1, 2, 3, 4, 5);
            Optional<Integer> firstSquareDivisibleByThree =
                someNumbers.stream()
                .map(x -> x * x)
                .filter(x -> x % 3 == 0)
                .findFirst(); // 9

    5.4 归约
        5.4.1 元素求和
        5.4.2 最大值和最小值

    5.6 数值流
        5.6.1 原始类型流特化
            Java 8引入了三个原始类型特化流接口来解决这个问题： IntStream 、 DoubleStream 和
            LongStream ，分别将流中的元素特化为 int 、 long 和 double ，从而避免了暗含的装箱成本。
            1. 映射到数值流
                mapToInt
            2. 转换回对象流
                IntStream intStream = menu.stream().mapToInt(Dish::getCalories);
                Stream<Integer> stream = intStream.boxed();
            3. 默认值 OptionalInt
                对于三种原始流特化，也分别有一个 Optional 原始类
                型特化版本： OptionalInt 、 OptionalDouble 和 OptionalLong 。
        5.6.2 数值范围
            IntStream evenNumbers = IntStream.rangeClosed(1, 100)
            .filter(n -> n % 2 == 0);
            System.out.println(evenNumbers.count());

        5.6.3 数值流应用:勾股数

    5.7 构建流
        5.7.1 由值创建流
            Stream<String> stream = Stream.of("Java 8 ", "Lambdas ", "In ", "Action");
            stream.map(String::toUpperCase).forEach(System.out::println);
        5.7.2 用数组创建流
            int[] numbers = {2, 3, 5, 7, 11, 13};
            int sum = Arrays.stream(numbers).sum();
        5.7.3 由文件生成流
            long uniqueWords = 0;
            try(Stream<String> lines =
            Files.lines(Paths.get("data.txt"), Charset.defaultCharset())){
            uniqueWords = lines.flatMap(line -> Arrays.stream(line.split(" ")))
            .distinct().count();}catch(IOException e){}
        5.7.4 由函数生成流: 创建无限流
            Stream API提供了两个静态方法来从函数生成流： Stream.iterate 和 Stream.generate 。
            Stream.iterate(0, n -> n + 2).limit(10).forEach(System.out::println);

            Stream.generate(Math::random).limit(5).forEach(System.out::println);